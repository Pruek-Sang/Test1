import React, { useState, useEffect } from 'react';
import { ShoppingCart, Package, BarChart3, MessageCircle, Plus, Minus } from 'lucide-react';

const NoodleShopSystem = () => {
  const [currentView, setCurrentView] = useState('shop');
  const [cart, setCart] = useState([]);
  const [inventory, setInventory] = useState({
    noodles: { small: 100, big: 80, instant: 60, glass: 40 },
    meat: { pork: 50, meatball: 100, organs: 30, redpork: 25 },
    soup: { clear: 200, tomyum: 150, dry: 100, waterfall: 80 }
  });
  const [orders, setOrders] = useState([]);
  const [showVtuber, setShowVtuber] = useState(false);
  const [chatMessages, setChatMessages] = useState([]);
  const [userMessage, setUserMessage] = useState('');

  const menuItems = [
    { id: 1, name: '‡πÄ‡∏â‡∏≤‡∏Å‡πã‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡πÉ‡∏™', price: 45, type: 'clear' },
    { id: 2, name: '‡πÄ‡∏â‡∏≤‡∏Å‡πã‡∏ß‡∏¢‡∏ï‡πâ‡∏°‡∏¢‡∏≥', price: 50, type: 'tomyum' },
    { id: 3, name: '‡πÄ‡∏â‡∏≤‡∏Å‡πã‡∏ß‡∏¢‡πÅ‡∏´‡πâ‡∏á', price: 45, type: 'dry' },
    { id: 4, name: '‡πÄ‡∏â‡∏≤‡∏Å‡πã‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡∏ï‡∏Å', price: 55, type: 'waterfall' }
  ];

  const noodleTypes = [
    { id: 'small', name: '‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å', price: 0 },
    { id: 'big', name: '‡πÄ‡∏™‡πâ‡∏ô‡πÉ‡∏´‡∏ç‡πà', price: 0 },
    { id: 'instant', name: '‡∏ö‡∏∞‡∏´‡∏°‡∏µ‡πà', price: 5 },
    { id: 'glass', name: '‡∏ß‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô', price: 5 }
  ];

  const meatTypes = [
    { id: 'pork', name: '‡∏´‡∏°‡∏π‡∏™‡∏±‡∏ö', price: 0 },
    { id: 'meatball', name: '‡∏•‡∏π‡∏Å‡∏ä‡∏¥‡πâ‡∏ô', price: 10 },
    { id: 'organs', name: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ô', price: 15 },
    { id: 'redpork', name: '‡∏´‡∏°‡∏π‡πÅ‡∏î‡∏á', price: 20 }
  ];

  const vtuberResponses = [
    "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏≤‡∏Å‡∏ó‡∏≤‡∏ô‡πÄ‡∏â‡∏≤‡∏Å‡πã‡∏ß‡∏¢‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô‡∏Ñ‡∏∞? üçú‚ú®",
    "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏≤‡∏Å‡πã‡∏ß‡∏¢‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏ú‡πá‡∏î‡∏£‡πâ‡∏≠‡∏ô‡∏≠‡∏£‡πà‡∏≠‡∏¢‡∏°‡∏≤‡∏Å! üå∂Ô∏è",
    "‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡∏≠‡∏¥‡πà‡∏°‡πÜ ‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏π‡∏Å‡∏ä‡∏¥‡πâ‡∏ô‡∏Å‡∏±‡∏ö‡∏´‡∏°‡∏π‡πÅ‡∏î‡∏á‡∏™‡∏¥‡∏Ñ‡∏∞ üòã",
    "‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏Å‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÉ‡∏™‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏¥‡∏Ñ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ú‡∏¥‡∏î‡∏´‡∏ß‡∏±‡∏á‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞! üíï",
    "‡∏≠‡∏¢‡∏≤‡∏Å‡∏ó‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô‡∏ö‡∏≠‡∏Å‡∏ô‡πâ‡∏≠‡∏á‡πÄ‡∏â‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞~"
  ];

  const addToCart = (item, noodleType, meatType) => {
    const newItem = {
      id: Date.now(),
      ...item,
      noodleType,
      meatType,
      totalPrice: item.price + noodleType.price + meatType.price
    };
    setCart([...cart, newItem]);
  };

  const removeFromCart = (id) => {
    setCart(cart.filter(item => item.id !== id));
  };

  const sendMessage = () => {
    if (userMessage.trim()) {
      setChatMessages([...chatMessages, 
        { type: 'user', message: userMessage },
        { type: 'vtuber', message: vtuberResponses[Math.floor(Math.random() * vtuberResponses.length)] }
      ]);
      setUserMessage('');
    }
  };

  const calculateDailyNeeds = () => {
    const avgOrdersPerDay = 50;
    return {
      noodles: {
        small: Math.ceil(avgOrdersPerDay * 0.4),
        big: Math.ceil(avgOrdersPerDay * 0.3),
        instant: Math.ceil(avgOrdersPerDay * 0.2),
        glass: Math.ceil(avgOrdersPerDay * 0.1)
      },
      meat: {
        pork: Math.ceil(avgOrdersPerDay * 0.5),
        meatball: Math.ceil(avgOrdersPerDay * 0.3),
        organs: Math.ceil(avgOrdersPerDay * 0.1),
        redpork: Math.ceil(avgOrdersPerDay * 0.1)
      }
    };
  };

  const ShopView = () => (
    <div className="p-6">
      <h2 className="text-2xl font-bold mb-6 text-center">üçú ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏â‡∏≤‡∏Å‡πã‡∏ß‡∏¢‡∏ô‡πâ‡∏≠‡∏á‡πÄ‡∏â‡∏≤</h2>
      <div className="grid md:grid-cols-2 gap-6">
        {menuItems.map(item => (
          <div key={item.id} className="bg-white rounded-lg shadow-md p-4">
            <h3 className="text-lg font-semibold mb-2">{item.name}</h3>
            <p className="text-xl font-bold text-orange-600 mb-4">‡∏ø{item.price}</p>
            
            <div className="mb-3">
              <label className="block text-sm font-medium mb-1">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡πâ‡∏ô:</label>
              <select className="w-full border rounded p-2" id={`noodle-${item.id}`}>
                {noodleTypes.map(noodle => (
                  <option key={noodle.id} value={noodle.id}>
                    {noodle.name} {noodle.price > 0 && `(+${noodle.price}‡∏ø)`}
                  </option>
                ))}
              </select>
            </div>
            
            <div className="mb-4">
              <label className="block text-sm font-medium mb-1">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠:</label>
              <select className="w-full border rounded p-2" id={`meat-${item.id}`}>
                {meatTypes.map(meat => (
                  <option key={meat.id} value={meat.id}>
                    {meat.name} {meat.price > 0 && `(+${meat.price}‡∏ø)`}
                  </option>
                ))}
              </select>
            </div>
            
            <button 
              onClick={() => {
                const noodleSelect = document.getElementById(`noodle-${item.id}`);
                const meatSelect = document.getElementById(`meat-${item.id}`);
                const selectedNoodle = noodleTypes.find(n => n.id === noodleSelect.value);
                const selectedMeat = meatTypes.find(m => m.id === meatSelect.value);
                addToCart(item, selectedNoodle, selectedMeat);
              }}
              className="w-full bg-orange-500 text-white py-2 rounded hover:bg-orange-600 transition-colors"
            >
              ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
            </button>
          </div>
        ))}
      </div>
    </div>
  );

  const CartView = () => (
    <div className="p-6">
      <h2 className="text-2xl font-bold mb-6">‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h2>
      {cart.length === 0 ? (
        <p className="text-gray-500 text-center">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤</p>
      ) : (
        <div>
          {cart.map(item => (
            <div key={item.id} className="bg-white rounded-lg shadow-md p-4 mb-4">
              <div className="flex justify-between items-center">
                <div>
                  <h3 className="font-semibold">{item.name}</h3>
                  <p className="text-sm text-gray-600">
                    {item.noodleType.name} + {item.meatType.name}
                  </p>
                  <p className="text-lg font-bold text-orange-600">‡∏ø{item.totalPrice}</p>
                </div>
                <button 
                  onClick={() => removeFromCart(item.id)}
                  className="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600"
                >
                  ‡∏•‡∏ö
                </button>
              </div>
            </div>
          ))}
          <div className="bg-orange-100 p-4 rounded-lg">
            <div className="flex justify-between items-center">
              <span className="text-lg font-semibold">‡∏£‡∏ß‡∏°:</span>
              <span className="text-xl font-bold text-orange-600">
                ‡∏ø{cart.reduce((sum, item) => sum + item.totalPrice, 0)}
              </span>
            </div>
            <button className="w-full bg-green-500 text-white py-2 rounded mt-3 hover:bg-green-600">
              ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
            </button>
          </div>
        </div>
      )}
    </div>
  );

  const InventoryView = () => {
    const dailyNeeds = calculateDailyNeeds();
    
    return (
      <div className="p-6">
        <h2 className="text-2xl font-bold mb-6">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h2>
        
        <div className="grid md:grid-cols-3 gap-6">
          <div className="bg-white rounded-lg shadow-md p-4">
            <h3 className="text-lg font-semibold mb-4">‡πÄ‡∏™‡πâ‡∏ô</h3>
            {Object.entries(inventory.noodles).map(([key, value]) => (
              <div key={key} className="flex justify-between items-center mb-2">
                <span>{noodleTypes.find(n => n.id === key)?.name}</span>
                <div className="flex items-center gap-2">
                  <span className={`font-bold ${value < dailyNeeds.noodles[key] ? 'text-red-500' : 'text-green-500'}`}>
                    {value}
                  </span>
                  <span className="text-sm text-gray-500">
                    (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: {dailyNeeds.noodles[key]})
                  </span>
                </div>
              </div>
            ))}
          </div>
          
          <div className="bg-white rounded-lg shadow-md p-4">
            <h3 className="text-lg font-semibold mb-4">‡πÄ‡∏ô‡∏∑‡πâ‡∏≠</h3>
            {Object.entries(inventory.meat).map(([key, value]) => (
              <div key={key} className="flex justify-between items-center mb-2">
                <span>{meatTypes.find(m => m.id === key)?.name}</span>
                <div className="flex items-center gap-2">
                  <span className={`font-bold ${value < dailyNeeds.meat[key] ? 'text-red-500' : 'text-green-500'}`}>
                    {value}
                  </span>
                  <span className="text-sm text-gray-500">
                    (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: {dailyNeeds.meat[key]})
                  </span>
                </div>
              </div>
            ))}
          </div>
          
          <div className="bg-white rounded-lg shadow-md p-4">
            <h3 className="text-lg font-semibold mb-4">‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</h3>
            <div className="space-y-2">
              <div className="p-3 bg-yellow-100 rounded">
                <p className="font-medium">üõí ‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠:</p>
                <ul className="text-sm mt-1">
                  <li>‚Ä¢ ‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å: 50 ‡∏Å‡∏Å.</li>
                  <li>‚Ä¢ ‡∏•‡∏π‡∏Å‡∏ä‡∏¥‡πâ‡∏ô: 3 ‡∏Å‡∏Å.</li>
                  <li>‚Ä¢ ‡∏´‡∏°‡∏π‡∏™‡∏±‡∏ö: 5 ‡∏Å‡∏Å.</li>
                </ul>
              </div>
              <div className="p-3 bg-green-100 rounded">
                <p className="font-medium">‚úÖ ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠:</p>
                <p className="text-sm">‡πÄ‡∏™‡πâ‡∏ô‡πÉ‡∏´‡∏ç‡πà, ‡∏ß‡∏∏‡πâ‡∏ô‡πÄ‡∏™‡πâ‡∏ô</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const VtuberChat = () => (
    <div className={`fixed bottom-4 right-4 bg-white rounded-lg shadow-lg transition-all duration-300 ${showVtuber ? 'w-80 h-96' : 'w-16 h-16'}`}>
      {!showVtuber ? (
        <button 
          onClick={() => setShowVtuber(true)}
          className="w-full h-full bg-pink-500 text-white rounded-lg hover:bg-pink-600 flex items-center justify-center text-2xl"
        >
          üë©‚Äçüç≥
        </button>
      ) : (
        <div className="p-4 h-full flex flex-col">
          <div className="flex justify-between items-center mb-3">
            <h3 className="font-bold text-pink-600">‡∏ô‡πâ‡∏≠‡∏á‡πÄ‡∏â‡∏≤ AI üçú</h3>
            <button 
              onClick={() => setShowVtuber(false)}
              className="text-gray-500 hover:text-gray-700"
            >
              ‚úï
            </button>
          </div>
          
          <div className="flex-1 overflow-y-auto mb-3 space-y-2">
            <div className="bg-pink-100 p-2 rounded-lg">
              <p className="text-sm">‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏ô‡πâ‡∏≠‡∏á‡πÄ‡∏â‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏£‡πà‡∏≠‡∏¢‡πÜ ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏≤~ üíï</p>
            </div>
            {chatMessages.map((msg, i) => (
              <div key={i} className={`p-2 rounded-lg text-sm ${msg.type === 'user' ? 'bg-blue-100 ml-8' : 'bg-pink-100 mr-8'}`}>
                {msg.message}
              </div>
            ))}
          </div>
          
          <div className="flex gap-2">
            <input 
              value={userMessage}
              onChange={(e) => setUserMessage(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
              placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°..."
              className="flex-1 border rounded px-2 py-1 text-sm"
            />
            <button 
              onClick={sendMessage}
              className="bg-pink-500 text-white px-3 py-1 rounded text-sm hover:bg-pink-600"
            >
              ‡∏™‡πà‡∏á
            </button>
          </div>
        </div>
      )}
    </div>
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 to-pink-50">
      {/* Navigation */}
      <nav className="bg-white shadow-md p-4">
        <div className="max-w-6xl mx-auto flex justify-between items-center">
          <h1 className="text-xl font-bold text-orange-600">üçú ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏â‡∏≤‡∏Å‡πã‡∏ß‡∏¢‡∏ô‡πâ‡∏≠‡∏á‡πÄ‡∏â‡∏≤</h1>
          <div className="flex gap-4">
            <button 
              onClick={() => setCurrentView('shop')}
              className={`flex items-center gap-2 px-4 py-2 rounded ${currentView === 'shop' ? 'bg-orange-500 text-white' : 'bg-gray-200'}`}
            >
              <ShoppingCart size={16} />
              ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
            </button>
            <button 
              onClick={() => setCurrentView('cart')}
              className={`flex items-center gap-2 px-4 py-2 rounded ${currentView === 'cart' ? 'bg-orange-500 text-white' : 'bg-gray-200'}`}
            >
              <Package size={16} />
              ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ({cart.length})
            </button>
            <button 
              onClick={() => setCurrentView('inventory')}
              className={`flex items-center gap-2 px-4 py-2 rounded ${currentView === 'inventory' ? 'bg-orange-500 text-white' : 'bg-gray-200'}`}
            >
              <BarChart3 size={16} />
              ‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
            </button>
          </div>
        </div>
      </nav>

      {/* Main Content */}
      <div className="max-w-6xl mx-auto">
        {currentView === 'shop' && <ShopView />}
        {currentView === 'cart' && <CartView />}
        {currentView === 'inventory' && <InventoryView />}
      </div>

      {/* AI Vtuber Chat */}
      <VtuberChat />
    </div>
  );
};

export default NoodleShopSystem;